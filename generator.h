/*
 * generator.h
 *
 *  Created on: 08.12.2011
 *      Author: marscher
 */

#ifndef GENERATOR_H_
#define GENERATOR_H_

#include "geometric_helper.h"
#include "common_typedefs.h"
#include "rotation_matrix.h"

namespace tkdGenerator {

/**
 * number of vertices of used solid figures
 */
enum SolidFigures {
	Tetrahedron = 4, Pyramid = 5, Prism = 6, Hexahedron = 8
};

const static v origin(0, 0, 0);

class Generator {
public:
	// 0, 0, 0
	v v1;
	// a, 0, 0
	v v2;
	// (a / 2, 0, g)
	v v3;
	// (0, h, 0)
	v v4;
	// (a, h, 0)
	v v5;
	// (a / 2, h, g)
	v v6;
	// (a / 2, 0, g + s)
	v v7;
	// (-a / 2, 0, g)
	v v8;
	// (-a / 2, h, g)
	v v9;
	// (-a / 2, 0, g + s)
	v v10;
	// (a / 2 + hs, 0, g + q)
	v v11;
	// (a + hs, 0, q)
	v v12;
	// fixme (a + hs + q, 0, -q)
	v v13;

	void createTKD();

	void createTKD(const v& origin);

	Generator(number height, number baseEdgeLength, number diameter,
			CoordsArray& posOut, IndexArray& indsOut) :
			h(height / 3), a(baseEdgeLength), w(diameter), posOut(posOut), indsOut(
					indsOut), R(0) {
		init();
	}

protected:
	// height of one third of tkd
	number h;
	// base edge length of central hexahedron
	number a;
	// diameter
	number w;
	// quantity s, overlap of two aligned tkd's
	number s;
	// height of base triangle of top inner prism
	number g;
	// height of base triangle of tetrahedron of ObenAussenPr2T
	number b;
	/* height of hyphotenuse s in base triangle of tetrahedron of ObenAussenPr2T
	 describing offset in x direction */
	number hs;
	// segment of hypothenuse s describing offset in x direction
	number q;

	/**
	 * stores a reference to CoordsArray owned by creator of this instance
	 */
	CoordsArray& posOut;
	/**
	 * stores a reference to IndexArray owned by creator of this instance
	 */
	IndexArray& indsOut;

	// matrix used to rotate all geometric objects
	RotationMatrix R;

	// global index which is incremented for all vertices generated by this instance
	size_t index;

	/**
	 * inits base geometric parameters
	 */
	void init();

	/**
	 *	creates the upper part of tkd (symmetric to bottom part!)
	 */
	void createTop(const v& offset);

	/**
	 * creates middle part with given offset
	 */
	void createMiddle(const v& offset);

	/**
	 * pushes posIn into global posOut reference and creates
	 * indices for each vertex which are pushed into global indsOut reference
	 */
	void createGeometricObject(const CoordsArray & posIn);
};

} //end of namespace
#endif /* GENERATOR_H_ */
