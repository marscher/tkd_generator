/*
 * generator.h
 *
 *  Created on: 08.12.2011
 *      Author: marscher
 */

#ifndef GENERATOR_H_
#define GENERATOR_H_

#include "geometric_helper.h"
#include "common_typedefs.h"
#include "rotation_matrix.h"

namespace tkdGenerator {

// subset indices
enum Subsets {
	LIPID = 0, CORNEOCYTE, BROKEN
};

const static vector3 origin(0, 0, 0);

/**
 * generates domain decomposition of tetrakaidecahedron.
 * After calling createDomain() you can get the positions and indices
 * of the created geometries to create a Grid object
 */
class TKDGeometryGenerator {

public:
	void createDomain();
	void createCorneocyte(const vector3& origin);
	void createLipid(const vector3& origin);

	/**
	 * @param height
	 * @param baseEdgeLength
	 * @param diameter
	 * @param d_lipid
	 */
	TKDGeometryGenerator(number height, number baseEdgeLength, number diameter,
			number d_lipid);

	number getVolume(int subset = CORNEOCYTE) const;
	number getVolume(number a, number s, number h) const;
	number getSurface(int subset = CORNEOCYTE) const;
	number getSurface(number a, number s, number h) const;
	const IndexArray& getIndices() const;
	const CoordsArray& getPositions() const;
	number getHeight() const;
	number getOverlap() const;

protected:
	/**
	 * number of vertices of used solid figures
	 */
	enum SolidFigures {
		Tetrahedron = 4, Pyramid = 5, Prism = 6, Hexahedron = 8
	};

	// height of one third of tkd : h = 1/3 * h_tkd
	number h_corneocyte;
	// base edge length of central hexahedron
	number a_corneocyte;
	// diameter
	number w_corneocyte;
	number s_corneocyte;
	// thickness of lipid matrix
	number d_lipid;
	// base edge length of lipid matrix
	number a_lipid;
	// height of 1/3 of lipid matrix
	number h_lipid;
	// quantity s, overlap of two aligned tkds with lipid matrix
	number s_lipid;

	/**
	 * stores coordinates of points
	 */
	CoordsArray posOut;

	/**
	 * stores indices for points
	 */
	IndexArray indsOut;

	// matrix used to rotate all geometric objects
	RotationMatrix R;

	// global index which is incremented for all vertices generated by this instance
	size_t index;

	/**
	 * inits base geometric parameters
	 */
	void initGeometricParams();

	/**
	 *	creates the upper part of tkd (symmetric to bottom part!)
	 */
	void createCorneocyteTop(const vector3& offset,
			const number rotationOffset = 0);

	void createLipidTop(const vector3& offset, const number rotationOffset = 0);

	/**
	 * creates middle part with given offset
	 */
	void createCorneocyteMiddle(const vector3& offset);

	void createLipidMiddle(const vector3& offset, const number rotationOffset =
			0);

	/**
	 * pushes posIn into global posOut reference and creates
	 * indices for each vertex which are pushed into global indsOut reference
	 */
	void createGeometricObject(const CoordsArray& posIn);

	///// segments of top and bottom
	CoordsArray obenInnen;
	// G(Ki -> ObenAussenPr)
	CoordsArray obenAussenPrism;

	CoordsArray obenAussenPr_rightTetrahedron;
	CoordsArray obenAussenPr_leftTetrahedrson;

	CoordsArray obenAussenPr2T_prism;

	///// segments of middle part
	// outer prism
	CoordsArray mitteAussenP1;
	// inner prism
	CoordsArray mitteAussenP2;

	// symetric with mittAussenH2Pr!
	//	CoordsArray mittAussen2PrH;

	// below obenAussenPr_rightTetrahedron
	CoordsArray mitteAussenH2Pr_tetrahedron;
	CoordsArray mitteAussenH2Pr_pyramid;

	CoordsArray mitteAussen2PrH_tetrahedron;
	CoordsArray mitteAussen2PrH_pyramid;

	// below obenAussenPrism
	CoordsArray mitteAussenHexahedron;

	//// lipid segments
	CoordsArray lipidTop;

	CoordsArray sideQuadHexahedron;

	CoordsArray sideHexagonHexahedron;
	CoordsArray sideHexagonLeftPrism;
};

} //end of namespace
#endif /* GENERATOR_H_ */
